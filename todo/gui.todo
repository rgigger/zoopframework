-	turn smarty->use_sub_dirs on by default (set it equal to true)
-	misc
	-	fix html_dboptions
		-	it is still using the old zoop db sql_fetch_simple_map
		-	use the following to determine the dataset to use
			-	query parts
				-	tablename
				-	idfield
				-	namefield
				-	orderby
			-	result set
			-	query object
				-	chained sql generator object
				-	some soft of object you create by just giving it sql and the escape vars
			-	sql query string
	-	identifiers in mssql: apparently it doesn't accept double quotes ""
-	use smarty->default_modifiers to automatically escape all html by default
	-	make sure it also applies to smarty functions and not just variables
	-	make sure it runs it after it applies all other modifiers
	-	make sure it doesn't apply to includes so it just escapes what you want
-	smarty resources
	-	possibly use resource paths (http://smarty.php.net/manual/en/template.resources.php) to handle module templates
	-	use the default template handler to present a pleasant error message when you can't find a template in development - or create it for you on the fly!
-	experiment with non smarty drivers
	-	configure in config.yaml
	-	drivers
		-	mizithra
			-	<? code ?> for code that doesn't print anything
			-	<?= code ?> for stuff that needs to print and escape
			-	syntax modules for textmate
				-	should just be a tweak to the php syntax
		-	plainTemplate (http://meta20.net/plainTemplates/) + phpQuery (http://meta20.net/phpQuery)

-	controls we need to have
	-	button that just goes to an url
		-	use onclick to set document.location
		-	post an action to the post page and redirect to the new location
-	GuiControls
	-	come up with a set of methods that need to be defined
	-	have a way to map plugins to GuiControls
	-	maybe have a way of sending undefinded smarty tags to a default GuiControl have having it determine based on the tag -	-	name and attributes what GuiControl to create and execute
	-	allow GuiControls and normal plugins to use templates within themselves
-	code for sanitizing html
	-	use a whitelist of tags and attributes
	-	come up with default whitelist configurations for allowing commonly needed, known to be safe tags and attributes
-	allow automatic filtering of output
	-	gzipping
		-	how much will this increase cpu on the server
		-	will it actually decrease latency
	-	minifying
-	templating system
	-	control characters
		-	postions
			-	open
			-	close
		-	purposes
			-	whether or not to print
			-	whitespace control
				-	indenting in the source for readability but removing them from the output
			-	whether or not to escape the result string (always escape by default)
	-	add a character somewhere in  such as +-/ etc in order to control whitespace properly
	-	integration with text/translation system
		-	special translation tag system
			-	process each template
			-	extract the text and hash it
			-	add the entry to the database so it can be translated
			-	enter a function into the template passing in the hash (constant) and languageId (variable) so it can pull the correct text
			-	add heuristics to find when something was only slightly changed to possibly help with the translation
		-	try to compile the code right into the smarty templates
			-	use the smarty compile_id (http://www.smarty.net/manual/en/variable.compile.id.php)
			-	combined with compiler functions (http://www.smarty.net/manual/en/plugins.compiler.functions.php)
			-	if you do this you may need a way to trigger a recompile when the text changes
	-	caching
		-	compiled php code
		-	content
		-	paramaterized content
	-	helpers/plugins?
		-	scopes
			-	zoop helpers
			-	app helpers
			-	zone helpers
			-	page helpers
		-	syntax
			-	as tags like in Smarty
				-	{name att1=value1 att2=value2}
				-	<?name att1=value1 att2=value2?>
				-	<?@name att1=value1 att2=value2?>
				-	<#name att1=value1 att2=value2 #>
			-	as funcions like in RoR
		-	functions
			-	creating links
				-	get links
				-	use javascript to do a post
				-	mailto links
			-	form tags
				-	create open an close tags
					-	handle nestedness issues
					-	handle upload forms
				-	handle the action field
			-	form elements
				-	buttons
					-	normal buttons
					-	submit buttons
					-	image buttons
				-	radio buttons
				-	checkboxes
				-	drop down menus
				-	combo boxes
				-	hidden fields
				-	text fields
				-	password fields
				-	textareas
				-	date field
				-	time field
				-	date/time field
				-	search boxes for a round trip to the server
				-	search boxes that pull results from ajax
				-	search boxes that filter local javascript data
			-	images
			-	pagination
			-	validation
				-	required
				-	int
				-	email
				-	regex
				-	matches (sameas)
-	themes
	-	provide a whole bunch of site themes and a good way to pull them into an existing stationary set