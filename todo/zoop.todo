-	class Zoop
	-	fix how it loads classes, make it use the dynamic loading stuff
		+	add in the auto include stuff
		-	use if for all of the zoop modules
-	check for ini options that are not secure or in bad form
	-	register globals
	-	magic quotes
		-	if magic quotes is on we need to warn them that their stuff will be double escaped when they try to put it into the database
-	start the google code clone
	-	first make a bug tracker for it
-	as part of the google code clone complete
	+	full zone support
	+	ful gui support
+	zone / gui integration
-	google code site
	-	make a history page in the wiki, take any history info off of the front page, just link to the wiki page
	-	same for design goals
	-	relatinship to stable zoop
	-	make the front page really short with just some links to other wiki pages
-	sample applications
	-	***duplicate google code?
		-	wiki
		-	bug tracker
		-	improvements
			-	manual creator
	-	manual creator
	-	tool for generating .term files for terminal.app
		-	have color schemes for each of the control tower defaults as well as some of your own
-	some concept of depencencies
	-	for instance guizone depends on gui and zone.  how should me make sure that these thigns are loaded?
-	zoop class
	-	modules
		-	public files
			+	make them work (accessible from with the application with no configuration)
			-	make it so you can concat multiple so if you have a bunch of modules with tiny css or js files you can just download one consolidated file
-	future modules
	-	db
		+	a base class showing what needs to go into it
		-	subclassess for
			+	pdo
			+	native bindings for postgres, etc
		+	a default object and the Sql* functions
		+	dbobject
		+	make it easy to escape paramaters and hard not too
		/	methods
			+	SqlQuery
			+	SqlInsert
			+	SqlUpdate
			+	SqlFetchOneCell
			+	SqlFetchRow
			+	SqlFetchRows
			-	SqlFetchColumn
			+	SqlFetchSimpleMap
			+	SqlFetchMap
			+	SqlFetchComplexMap
			-	SqlFetchParent
			-	SqlFetchChildren
	-	zoop textmate bundle
	-	mail
		-	Message
		-	SmartMessage
	-	session
		-	drivers
			-	files
			-	mysql
			+	pgsql
			-	msession?
			-	my daemon?
			-	that other guys daemon
			-	pear
			-	pdo
		-	modes
			-	serialize
			-	serialize_manual
			-	write_unsafe
			+	write_manual (default)
	-	translate
	-	xml
		-	works with both php4 and php5
	-	sequence
	-	storage
	-	fpdf
	-	rospdf
	-	spell
	-	cli
	-	server
		-	smtp
		-	http
		-	session
		-	sql???
	-	zap
		-	configuration
			-	method and paramaters for setting directories that should be writable to the web server
		-	local directory functions
			-	create tmp directory
			 	-	create tmp
				-	create sub directories such as tmp/gui
				-	set permissions on tmp direcotory to be writable to the web server
			-	create storage directories
				-	set permissions make them writable to the web server
	-	some sort of guicontrols like thing
	-	graphic
		-	contexts for gd, imagemagic, fpdf, rospdf, flash, svg, etc.
	-	graph
	-	auth???
	-	todo???
	-	nested sets???
	-	a package/module/bundle manager (like unto gems)
		-	maybe use the pear module manager
		-	or rpm
		-	or apt-get/deb
		-	roll your own?
	-	wiki
		-	have code for translating complicated wiki style formatting into:
			-	html
			-	graphic/xml
	-	filter
		-	look at the GetPost* functions in pehppy and also see what they have done with the php filtering extension
	-	ajax
		-	dojo?
	-	rad/"scaffolding"
		-	edit actual files or just produce code for you to copy and paste
		-	cli first - open in textmate?
	-	permissions
	-	caching
		-	template caching
		-	url (virtual path) caching
		-	data / object cache
		-	query caching
		-	app variables stored in shared memory
		-	file (or memory or db) based caching of compiles resources
	-	logging
		-	performance logging
			-	by page
			-	with custom profile segments
		-	error logging
		-	assert / condition logging
		-	audit logging
	-	crawl
		-	a way to crawl sites with a script and curl
		-	can be used for testing or making an api to a website you don't control
-	work on existing modules
	-	zone
		-	automatically display templates?
		-	automatically determine file output type?
-	skeleton
	-	have more than one skeleton
	-	autogenerate it
		-	change the way zone params are handled
			-	no more "function getParamNames..."
			-	instead use $this->addZoneParam($paramName, $paramType, $extra)
				-	$paramType is one of {int, identifier, regex, ...}
					-	maybe default to identifier
					-	also maybe put a limit on the length (like maybe 20 chars or so)
		-	change the way page params are handled
			-	allow you to have a paramsxxx function that corresponds to the pagexxx and postxxx functions
				-	it will allow you to assign names, validation types and length limits as with zone params above
				-	they will be optional but will default to using numric indicies for names as it does now, with type identifier and the same default length limit as the zone params above
-	apps to port
	-	translate
	-	directory
-	server module
	-	http server
	-	zoop app server
	-	db server
	-	dns server
	-	mail server
-	differences
	-	more advanced security system
	-	controller
	-	graphic system
	-	translation system
	-	session system
	-	xml handling???
	-	workflows
	-	storage system
	-	spell checker
	-	routing mechanism
	-		we don't have the overhead of complex pattern based routes : but we don't have the flexilibilty either : does it matter in practical terms
	-	post functions
		-	rails seems to separate out different actions in the controller whereas we make a switch statement in the post function
		-	how do they handle the navigation???
		-	do they prevent the dreaded "do you want to post this data again" message?
	-	navigation, sequences, etc
	-	smarty / mizithra tags escaped by default, no h() required
	-	find often equates to putting sql in your code, we try to do that less
	-	also the late static binding issue is less of a problem when we wrap everything
	-	post functions vs the alternatives
		-	button_to
			-	you have to include any data that it needs, often you are going to just want data from the form
			-	it creates a div???, why does it do that.  then you need to make special style, mapped to every button to prevent it from doing that
	-	error handling
		-	we automatically never now anything in production (although it looks like it does this too)
-	design goal
	-	keep global configurations global and local configurations local (and close to what they affect)
		-	for example zone params go in the zone not in some big master config file
-	security
	-	make sure you always do all validation